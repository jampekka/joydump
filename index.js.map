{
  "version": 3,
  "sources": ["flatobj.coffee", "index.coffee"],
  "sourcesContent": ["# Flatten object to a list\n\n_is_object = (obj) -> obj == Object obj\n\nflatobj_ = (obj, me=\"\") ->\n\tif not _is_object obj\n\t\tyield [me, obj]\n\t\treturn\n\tnames = (name for name of obj)\n\tnames.sort()\n\tfor name in names\n\t\tn = \"#{me}.#{name}\"\n\t\tyield from flatobj_(obj[name], n)\n\nexport flatobj = (obj) ->\n\tnames = []\n\tvalues = []\n\tfor [name, value] from flatobj_(obj)\n\t\tnames.push name\n\t\tvalues.push value\n\treturn [names, values]\n\n###\nconsole.log \"Here\"\nconsole.log flatobj 1\n\nconsole.log Array.from flatobj\n\tfoo: \"bar\"\n\tarray: [1,2,3]\n\tinteger: 69\n\tnested:\n\t\tfoo: \"nestbar\"\n\t\tarray: [3,4,5]\n###\n\n", "flatobj = require('./flatobj.coffee')\n\n\n```\n\n\nfunction propdump(o) {\n\tif(typeof o !== \"object\") {\n\t\treturn o;\n\t}\n\tlet d = {};\n\tfor(const prop in o) {\n\t\td[prop] = propdump(o[prop]);\n\t}\n\treturn d;\n}\n\nlet controller_elements = {};\nlet prev_events = {};\n\nlet log = [];\n\nfunction dump_joys() {\n\tfor(let pad of navigator.getGamepads()) {\n\t\tdump_joy(pad);\n\t}\n}\n\n/*window.addEventListener(\n\t\"gamepadconnected\",\n\t(e) => {\n\t\tconsole.log(\"Here!\");\n\t\tconsole.log(JSON.stringify(propdump(e.gamepad)));\n\t}\n);*/\n\n```\n\nloggers = {}\n\ndump_joy = (pad) ->\n\treturn if prev_events[pad.index] == pad.timestamp\n\t\n\tunix_time = Date.now()/1000\n\tlogger = loggers[pad.index]\n\tif not logger\n\t\thandle = await logdir.getFileHandle \"#{pad.index}-#{pad.id}.jsons\", create: true\n\t\tlogger = await handle.createWritable keepExistingData: true\n\t\tloggers[pad.index] = logger\n\n\tprev_events[pad.index] = pad.timestamp\n\td = propdump(pad)\n\td.unix_time = unix_time\n\t\n\twtf = await logger.write JSON.stringify(d)\n\tel = controller_elements[pad.index]\n\tif not el\n\t\tel = document.createElement(\"div\")\n\t\tdocument.getElementById(\"controllers\").append(el)\n\t\tcontroller_elements[pad.index] = el\n\n\tel.innerHTML = JSON.stringify(flatobj.flatobj(d))\n\nwindow.download = () ->\n\toutput = new JSZip()\n\tfor await [name, fh] from logdir.entries()\n\t\tf = await fh.getFile()\n\t\tc = await f.text()\n\t\toutput.file name, c\n\t\n\tcontent = await output.generateAsync type: \"blob\", compression: \"DEFLATE\"\n\tsaveAs content, \"joydump-#{session_id}.zip\"\n\t###\n\tconsole.log(\"download\");\n\t//let jsonBlob = new Blob([JSON.stringify(log)], { type: 'application/javascript;charset=utf-8' });\n\tlet datestr = (new Date()).toISOString();\n\tlet filebase = \"joydump-\" + datestr;\n\toutput.file(filebase + \".json\", JSON.stringify(log));\n\toutput.generateAsync({type: \"blob\", compression: \"DEFLATE\"})\n\t.then((content) => {\n\t\tsaveAs(content, filebase+\".zip\");\n\t});\n\t###\n\nlogdir = null\nsession_id = null\ndo ->\n\tif not navigator.storage.getDirectory\n\t\terror \"Your browser doesn't support the File System Access API. Please uprage your browser.\"\n\t\treturn\n\t\n\n\tsession_id = (new Date()).toISOString()\n\troot = await navigator.storage.getDirectory()\n\tlogsdir = await root.getDirectoryHandle \"joydump\", create: true\n\t\n\t#testhandle = await logsdir.getFileHandle \"test\", create: true\n\t#readable = await testhandle.getFile()\n\t#console.log \"Contents\", await readable.text()\n\t#writable = await testhandle.createWritable keepExistingData: true\n\t#console.log writable\n\t#await writable.write(\"Foo\\n\")\n\t\n\tlogdir = await logsdir.getDirectoryHandle session_id, create: true\n\t\n\tsetInterval(dump_joys, 10)\n"],
  "mappings": "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",
  "names": ["results", "flatobj"]
}
